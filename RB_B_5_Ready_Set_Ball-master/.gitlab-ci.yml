# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  REPO_NAME: git.linux.iastate.edu/309Fall2017/RB_B_5_Ready_Set_Ball/

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is mydomainperso.com, and that your repository is repos/projectname, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/mydomainperso.com/repos/projectname 
# Thus, making a symbolic link corrects this.
before_script:
    - export PATH=$PATH:/usr/local/bin
    - rm -rf $HOME/gitlab-go
    - mkdir -p $HOME/gitlab-go
    - export GOPATH=$HOME/gitlab-go
    - echo $CI_BUILD_REF
    - echo $CI_PROJECT_DIR
    - go version
    - echo $GOPATH
    - go get -u github.com/golang/dep/cmd/dep
    - mkdir -p $GOPATH/src/$REPO_NAME
    - mv $CI_PROJECT_DIR/* $GOPATH/src/$REPO_NAME/
    - cd $GOPATH/src/$REPO_NAME/backend

stages:
    - test
    - build

format:
    stage: test
    script:
        # Go tests
        - go get
        - go get github.com/stretchr/testify/assert
        - go tool vet -composites=false -shadow=true *.go
        - go test -race $(go list ./... | grep -v /vendor/) -cover
        #Node.js tests
        - cd ../web-front
        - npm install
        - npm test
    tags:
        - rsb_backend

compile:
    stage: build
    script:
        # Go build
        - go get
        - go get github.com/stretchr/testify/assert
        # Better put this in a Makefile
        - go build -race -ldflags "-extldflags '-static'" -o mybinary
    artifacts:
        paths:
            - mybinary
    tags:
        - rsb_backend
